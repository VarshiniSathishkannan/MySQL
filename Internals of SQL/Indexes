Orders table - order_id (PK)
customer table - customer_id (PK)

select order_id, customer_id from orders where order_id = 5;

Execution plan - clustered Index Seek (Very quick)
Estimated no of rows to be read - 1

There are 2 things: 
Seek - Very Fast than Scan, quickly get the data
Scan - Goes through the whole records

1
3
6
8
9
10
2
4

Here to get 4, we need to go through the whole records, worst case is O(n) complexity

Suppose if the rows are sorted, then we can do binary search O(log(n))

This is where index comes

Primary key is a index by default

Primary key is unique and clustered 

There are 2 types of index:
clustered
non clustered

Clustered:

Physical ordering of records are maintained based on the primary/clustered key in the actual table, Sorted in ascending order based on the key

select order_id, customer_id from orders where customer_id = 5;

Execution plan - clustered index Scan
Estimated no of rows to be read - 68883

Because customer_id is not a index on orders table

We cannot have 2 clustered index on a single table, physically we can order only based on a single index.

We can have composite clustered index (order_id,customer_id) first order based on order_id then on customer_id but not separately on both

Non-clustered Index:

Separate lookup table which maintains the sorted key of the index column with the address of the actual record

We can have many no of non clustered index

Extra storage

little overhead since we are checking lookup table and actual table





